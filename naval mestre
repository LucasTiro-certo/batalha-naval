#include <stdio.h>
#include <stdlib.h> // Necessário para a função abs()

// --- CONSTANTES GLOBAIS ---
// Define o tamanho do tabuleiro principal do jogo
#define TAMANHO_TABULEIRO 10
// Define o tamanho das matrizes de habilidade (usaremos 5x5)
#define TAMANHO_HABILIDADE 5

// --- PROTÓTIPOS DAS FUNÇÕES ---

// Funções para manipular o tabuleiro
void inicializar_tabuleiro(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO]);
void exibir_tabuleiro(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO]);
void aplicar_habilidade(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int habilidade[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE], int origem_linha, int origem_col);

// Funções para criar as matrizes de efeito das habilidades
void criar_matriz_cone(int matriz[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE]);
void criar_matriz_cruz(int matriz[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE]);
void criar_matriz_octaedro(int matriz[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE]);

/**
 * @brief Função principal que executa o programa.
 */
int main() {
    // Declaração do tabuleiro principal e das matrizes de habilidade
    int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO];
    int matriz_cone[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE];
    int matriz_cruz[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE];
    int matriz_octaedro[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE];

    // Cria as matrizes de habilidade
    criar_matriz_cone(matriz_cone);
    criar_matriz_cruz(matriz_cruz);
    criar_matriz_octaedro(matriz_octaedro);

    // --- Demonstração da Habilidade em Cone ---
    printf("--- HABILIDADE CONE ---\n");
    inicializar_tabuleiro(tabuleiro); // Prepara o tabuleiro
    printf("Tabuleiro original com navios:\n");
    exibir_tabuleiro(tabuleiro);
    
    int cone_origem_linha = 2;
    int cone_origem_col = 4;
    printf("\nAplicando habilidade CONE na posicao (%d, %d)...\n", cone_origem_linha, cone_origem_col);
    aplicar_habilidade(tabuleiro, matriz_cone, cone_origem_linha, cone_origem_col);
    exibir_tabuleiro(tabuleiro);
    printf("\n\n");

    // --- Demonstração da Habilidade em Cruz ---
    printf("--- HABILIDADE CRUZ ---\n");
    inicializar_tabuleiro(tabuleiro); // Reseta o tabuleiro para a próxima demonstração
    printf("Tabuleiro original com navios:\n");
    exibir_tabuleiro(tabuleiro);

    int cruz_origem_linha = 5;
    int cruz_origem_col = 5;
    printf("\nAplicando habilidade CRUZ na posicao (%d, %d)...\n", cruz_origem_linha, cruz_origem_col);
    aplicar_habilidade(tabuleiro, matriz_cruz, cruz_origem_linha, cruz_origem_col);
    exibir_tabuleiro(tabuleiro);
    printf("\n\n");

    // --- Demonstração da Habilidade em Octaedro (Losango) ---
    printf("--- HABILIDADE OCTAEDRO ---\n");
    inicializar_tabuleiro(tabuleiro); // Reseta o tabuleiro
    printf("Tabuleiro original com navios:\n");
    exibir_tabuleiro(tabuleiro);

    int octa_origem_linha = 7;
    int octa_origem_col = 2;
    printf("\nAplicando habilidade OCTAEDRO na posicao (%d, %d)...\n", octa_origem_linha, octa_origem_col);
    aplicar_habilidade(tabuleiro, matriz_octaedro, octa_origem_linha, octa_origem_col);
    exibir_tabuleiro(tabuleiro);

    return 0;
}

/**
 * @brief Preenche o tabuleiro com água (0) e posiciona alguns navios (3).
 * @param tabuleiro A matriz 10x10 a ser inicializada.
 */
void inicializar_tabuleiro(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO]) {
    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
            tabuleiro[i][j] = 0; // 0 representa água
        }
    }
    // Posiciona alguns navios para demonstração
    tabuleiro[1][1] = 3;
    tabuleiro[2][5] = 3;
    tabuleiro[3][4] = 3;
    tabuleiro[5][6] = 3;
    tabuleiro[7][1] = 3;
    tabuleiro[8][8] = 3;
}

/**
 * @brief Exibe o tabuleiro no console com caracteres específicos.
 * ~ : Água (0)
 * N : Navio (3)
 * * : Área de Efeito (5)
 * @param tabuleiro A matriz 10x10 a ser exibida.
 */
void exibir_tabuleiro(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO]) {
    printf("   ");
    for(int i = 0; i < TAMANHO_TABULEIRO; i++) printf("%d ", i);
    printf("\n");
    printf("   --------------------\n");

    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        printf("%d |", i);
        for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
            switch (tabuleiro[i][j]) {
                case 0:
                    printf(" ~"); // Água
                    break;
                case 3:
                    printf(" N"); // Navio
                    break;
                case 5:
                    printf(" *"); // Área de efeito da habilidade
                    break;
                default:
                    printf(" ?"); // Valor desconhecido
                    break;
            }
        }
        printf("\n");
    }
}

/**
 * @brief Cria a matriz de efeito para a habilidade em Cone.
 * A forma de cone é gerada com base na distância da coluna central,
 * expandindo a cada linha.
 * @param matriz A matriz 5x5 que representará a habilidade.
 */
void criar_matriz_cone(int matriz[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE]) {
    int centro = TAMANHO_HABILIDADE / 2;
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            // Condicional para criar a forma de V (cone)
            // A área afetada (1) é definida se a coluna 'j' está dentro de uma
            // faixa que aumenta com a linha 'i'.
            // A condição i <= centro garante que o cone não preencha a matriz inteira.
            if (j >= centro - i && j <= centro + i && i <= centro) {
                matriz[i][j] = 1; // Área afetada
            } else {
                matriz[i][j] = 0; // Área não afetada
            }
        }
    }
}

/**
 * @brief Cria a matriz de efeito para a habilidade em Cruz.
 * @param matriz A matriz 5x5 que representará a habilidade.
 */
void criar_matriz_cruz(int matriz[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE]) {
    int centro = TAMANHO_HABILIDADE / 2;
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            // Condicional: define como 1 se a célula está na linha central OU na coluna central.
            if (i == centro || j == centro) {
                matriz[i][j] = 1; // Área afetada
            } else {
                matriz[i][j] = 0; // Área não afetada
            }
        }
    }
}

/**
 * @brief Cria a matriz de efeito para a habilidade em Octaedro (vista frontal, um losango).
 * A forma é calculada usando a distância de Manhattan do centro.
 * @param matriz A matriz 5x5 que representará a habilidade.
 */
void criar_matriz_octaedro(int matriz[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE]) {
    int centro = TAMANHO_HABILIDADE / 2;
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            // Condicional: usa a distância de Manhattan.
            // A soma das distâncias absolutas da linha e coluna até o centro
            // deve ser menor ou igual ao raio (centro).
            if (abs(i - centro) + abs(j - centro) <= centro) {
                matriz[i][j] = 1; // Área afetada
            } else {
                matriz[i][j] = 0; // Área não afetada
            }
        }
    }
}

/**
 * @brief Sobrepõe uma matriz de habilidade no tabuleiro principal.
 * @param tabuleiro O tabuleiro 10x10 do jogo.
 * @param habilidade A matriz 5x5 da habilidade.
 * @param origem_linha A linha do tabuleiro onde o centro da habilidade será aplicado.
 * @param origem_col A coluna do tabuleiro onde o centro da habilidade será aplicado.
 */
void aplicar_habilidade(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int habilidade[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE], int origem_linha, int origem_col) {
    int centro_habilidade = TAMANHO_HABILIDADE / 2;

    // Percorre a matriz de habilidade (5x5)
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            
            // Verifica se a posição atual na matriz de habilidade afeta uma área (valor 1)
            if (habilidade[i][j] == 1) {
                // Calcula a posição correspondente no tabuleiro principal.
                // A fórmula ajusta a coordenada com base no centro da habilidade
                // para que a matriz de habilidade seja centralizada na origem.
                int alvo_linha = origem_linha - centro_habilidade + i;
                int alvo_col = origem_col - centro_habilidade + j;

                // **Condicional de Segurança**:
                // Garante que a área de efeito não seja aplicada fora dos limites do tabuleiro.
                if (alvo_linha >= 0 && alvo_linha < TAMANHO_TABULEIRO &&
                    alvo_col >= 0 && alvo_col < TAMANHO_TABULEIRO) {
                    
                    // Marca a posição no tabuleiro com o valor 5 (área afetada)
                    tabuleiro[alvo_linha][alvo_col] = 5;
                }
            }
        }
    }
}
